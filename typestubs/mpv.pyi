from ctypes import *
from typing import Any

dll: str
backend: Any
fs_enc: str
lc: Any
enc: Any
sofile: Any

class ShutdownError(SystemError): ...
class MpvHandle(c_void_p): ...
class MpvRenderCtxHandle(c_void_p): ...
class MpvOpenGLCbContext(c_void_p): ...
class PropertyUnavailableError(AttributeError): ...

class ErrorCode:
    SUCCESS: int
    EVENT_QUEUE_FULL: int
    NOMEM: int
    UNINITIALIZED: int
    INVALID_PARAMETER: int
    OPTION_NOT_FOUND: int
    OPTION_FORMAT: int
    OPTION_ERROR: int
    PROPERTY_NOT_FOUND: int
    PROPERTY_FORMAT: int
    PROPERTY_UNAVAILABLE: int
    PROPERTY_ERROR: int
    COMMAND: int
    LOADING_FAILED: int
    AO_INIT_FAILED: int
    VO_INIT_FAILED: int
    NOTHING_TO_PLAY: int
    UNKNOWN_FORMAT: int
    UNSUPPORTED: int
    NOT_IMPLEMENTED: int
    GENERIC: int
    EXCEPTION_DICT: Any
    @staticmethod
    def default_error_handler(ec, *args): ...
    @classmethod
    def raise_for_ec(kls, ec, func, *args) -> None: ...

MpvGlGetProcAddressFn: Any

class MpvOpenGLInitParams(Structure):
    get_proc_address: Any
    get_proc_address_ctx: Any
    extra_exts: Any
    def __init__(self, get_proc_address) -> None: ...

class MpvOpenGLFBO(Structure):
    fbo: Any
    internal_format: Any
    def __init__(self, w, h, fbo: int = ..., internal_format: int = ...) -> None: ...

class MpvRenderFrameInfo(Structure):
    def as_dict(self): ...

class MpvOpenGLDRMParams(Structure): ...
class MpvOpenGLDRMDrawSurfaceSize(Structure): ...

class MpvOpenGLDRMParamsV2(Structure):
    atomic_request_ptr: Any
    def __init__(self, crtc_id, connector_id, atomic_request_ptr, fd: int = ..., render_fd: int = ...) -> None: ...

class MpvRenderParam(Structure):
    TYPES: Any
    value: Any
    data: Any
    def __init__(self, name, value: Any | None = ...) -> None: ...

def kwargs_to_render_param_array(kwargs): ...

class MpvFormat(c_int):
    NONE: int
    STRING: int
    OSD_STRING: int
    FLAG: int
    INT64: int
    DOUBLE: int
    NODE: int
    NODE_ARRAY: int
    NODE_MAP: int
    BYTE_ARRAY: int
    def __eq__(self, other): ...
    def __hash__(self): ...

class MpvEventID(c_int):
    NONE: int
    SHUTDOWN: int
    LOG_MESSAGE: int
    GET_PROPERTY_REPLY: int
    SET_PROPERTY_REPLY: int
    COMMAND_REPLY: int
    START_FILE: int
    END_FILE: int
    FILE_LOADED: int
    TRACKS_CHANGED: int
    TRACK_SWITCHED: int
    IDLE: int
    PAUSE: int
    UNPAUSE: int
    TICK: int
    SCRIPT_INPUT_DISPATCH: int
    CLIENT_MESSAGE: int
    VIDEO_RECONFIG: int
    AUDIO_RECONFIG: int
    METADATA_UPDATE: int
    SEEK: int
    PLAYBACK_RESTART: int
    PROPERTY_CHANGE: int
    CHAPTER_CHANGE: int
    ANY: Any
    @classmethod
    def from_str(kls, s): ...

identity_decoder: Any
strict_decoder: Any

def lazy_decoder(b): ...

class MpvNodeList(Structure):
    def array_value(self, decoder=...): ...
    def dict_value(self, decoder=...): ...

class MpvByteArray(Structure):
    data: Any
    size: Any
    def __init__(self, value) -> None: ...
    def bytes_value(self): ...

class MpvNode(Structure):
    def node_value(self, decoder=...): ...
    @staticmethod
    def node_cast_value(v, fmt=..., decoder=...): ...

class MpvNodeUnion(Union): ...

class MpvSubApi(c_int):
    MPV_SUB_API_OPENGL_CB: int

class MpvEvent(Structure):
    def as_dict(self, decoder=...): ...

class MpvEventProperty(Structure):
    def as_dict(self, decoder=...): ...

class MpvEventLogMessage(Structure):
    def as_dict(self, decoder=...): ...

class MpvEventEndFile(Structure):
    EOF: int
    RESTARTED: int
    ABORTED: int
    QUIT: int
    ERROR: int
    REDIRECT: int
    @property
    def value(self): ...
    def as_dict(self, decoder=...): ...

class MpvEventScriptInputDispatch(Structure):
    def as_dict(self, decoder=...) -> None: ...

class MpvEventClientMessage(Structure):
    def as_dict(self, decoder=...): ...

StreamReadFn: Any
StreamSeekFn: Any
StreamSizeFn: Any
StreamCloseFn: Any
StreamCancelFn: Any

class StreamCallbackInfo(Structure): ...

StreamOpenFn: Any
WakeupCallback: Any
RenderUpdateFn: Any
OpenGlCbUpdateFn: Any
OpenGlCbGetProcAddrFn: Any

def bytes_free_errcheck(res, func, *args): ...
def notnull_errcheck(res, func, *args): ...

ec_errcheck: Any

class _Proxy:
    def __init__(self, mpv) -> None: ...

class _PropertyProxy(_Proxy):
    def __dir__(self): ...

class _FileLocalProxy(_Proxy):
    def __getitem__(self, name): ...
    def __setitem__(self, name, value): ...
    def __iter__(self): ...

class _OSDPropertyProxy(_PropertyProxy):
    def __getattr__(self, name): ...
    def __setattr__(self, _name, _value) -> None: ...

class _DecoderPropertyProxy(_PropertyProxy):
    def __init__(self, mpv, decoder) -> None: ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value) -> None: ...

class GeneratorStream:
    size: Any
    def __init__(self, generator_fun, size: Any | None = ...) -> None: ...
    def seek(self, offset): ...
    def read(self, size): ...
    def close(self) -> None: ...
    def cancel(self) -> None: ...

class ImageOverlay:
    m: Any
    overlay_id: Any
    pos: Any
    def __init__(self, m, overlay_id, img: Any | None = ..., pos=...) -> None: ...
    img: Any
    def update(self, img: Any | None = ..., pos: Any | None = ...) -> None: ...
    def remove(self) -> None: ...

class FileOverlay:
    m: Any
    overlay_id: Any
    pos: Any
    size: Any
    stride: Any
    def __init__(self, m, overlay_id, filename: Any | None = ..., size: Any | None = ..., stride: Any | None = ..., pos=...) -> None: ...
    filename: Any
    def update(self, filename: Any | None = ..., size: Any | None = ..., stride: Any | None = ..., pos: Any | None = ...) -> None: ...
    def remove(self) -> None: ...

class MPV:
    handle: Any
    osd: Any
    file_local: Any
    raw: Any
    strict: Any
    lazy: Any
    overlay_ids: Any
    overlays: Any
    def __init__(self, *extra_mpv_flags, log_handler: Any | None = ..., start_event_thread: bool = ..., loglevel: Any | None = ..., **extra_mpv_opts): ...
    @property
    def core_shutdown(self): ...
    def check_core_alive(self) -> None: ...
    def wait_until_paused(self) -> None: ...
    def wait_for_playback(self) -> None: ...
    def wait_until_playing(self): ...
    def wait_for_property(self, name, cond=..., level_sensitive: bool = ...): ...
    def wait_for_shutdown(self) -> None: ...
    def prepare_and_wait_for_property(self, name, cond=..., level_sensitive: bool = ...): ...
    def wait_for_event(self, *event_types, cond=...): ...
    def prepare_and_wait_for_event(self, *event_types, cond=...): ...
    def __del__(self) -> None: ...
    def terminate(self) -> None: ...
    def set_loglevel(self, level) -> None: ...
    def command(self, name, *args) -> None: ...
    def node_command(self, name, *args, decoder=...): ...
    def seek(self, amount, reference: str = ..., precision: str = ...) -> None: ...
    def revert_seek(self) -> None: ...
    def frame_step(self) -> None: ...
    def frame_back_step(self) -> None: ...
    def property_add(self, name, value: int = ...) -> None: ...
    def property_multiply(self, name, factor) -> None: ...
    def cycle(self, name, direction: str = ...) -> None: ...
    def screenshot(self, includes: str = ..., mode: str = ...) -> None: ...
    def screenshot_to_file(self, filename, includes: str = ...) -> None: ...
    def screenshot_raw(self, includes: str = ...): ...
    def allocate_overlay_id(self): ...
    def free_overlay_id(self, overlay_id) -> None: ...
    def create_file_overlay(self, filename: Any | None = ..., size: Any | None = ..., stride: Any | None = ..., pos=...): ...
    def create_image_overlay(self, img: Any | None = ..., pos=...): ...
    def remove_overlay(self, overlay_id) -> None: ...
    def playlist_next(self, mode: str = ...) -> None: ...
    def playlist_prev(self, mode: str = ...) -> None: ...
    def playlist_play_index(self, idx) -> None: ...
    def loadfile(self, filename, mode: str = ..., **options) -> None: ...
    def loadlist(self, playlist, mode: str = ...) -> None: ...
    def playlist_clear(self) -> None: ...
    def playlist_remove(self, index: str = ...) -> None: ...
    def playlist_move(self, index1, index2) -> None: ...
    def playlist_shuffle(self) -> None: ...
    def playlist_unshuffle(self) -> None: ...
    def run(self, command, *args) -> None: ...
    def quit(self, code: Any | None = ...) -> None: ...
    def quit_watch_later(self, code: Any | None = ...) -> None: ...
    def stop(self, keep_playlist: bool = ...) -> None: ...
    def audio_add(self, url, flags: str = ..., title: Any | None = ..., lang: Any | None = ...) -> None: ...
    def audio_remove(self, audio_id: Any | None = ...) -> None: ...
    def audio_reload(self, audio_id: Any | None = ...) -> None: ...
    def video_add(self, url, flags: str = ..., title: Any | None = ..., lang: Any | None = ...) -> None: ...
    def video_remove(self, video_id: Any | None = ...) -> None: ...
    def video_reload(self, video_id: Any | None = ...) -> None: ...
    def sub_add(self, url, flags: str = ..., title: Any | None = ..., lang: Any | None = ...) -> None: ...
    def sub_remove(self, sub_id: Any | None = ...) -> None: ...
    def sub_reload(self, sub_id: Any | None = ...) -> None: ...
    def sub_step(self, skip) -> None: ...
    def sub_seek(self, skip) -> None: ...
    def toggle_osd(self) -> None: ...
    def print_text(self, text) -> None: ...
    def show_text(self, string, duration: str = ..., level: Any | None = ...) -> None: ...
    def expand_text(self, text): ...
    def expand_path(self, path): ...
    def show_progress(self) -> None: ...
    def rescan_external_files(self, mode: str = ...) -> None: ...
    def discnav(self, command) -> None: ...
    def mouse(x, y, button: Any | None = ..., mode: str = ...) -> None: ...
    def keypress(self, name) -> None: ...
    def keydown(self, name) -> None: ...
    def keyup(self, name: Any | None = ...) -> None: ...
    def keybind(self, name, command) -> None: ...
    def write_watch_later_config(self) -> None: ...
    def overlay_add(self, overlay_id, x, y, file_or_fd, offset, fmt, w, h, stride) -> None: ...
    def overlay_remove(self, overlay_id) -> None: ...
    def script_message(self, *args) -> None: ...
    def script_message_to(self, target, *args) -> None: ...
    def observe_property(self, name, handler) -> None: ...
    def property_observer(self, name): ...
    def unobserve_property(self, name, handler) -> None: ...
    def unobserve_all_properties(self, handler) -> None: ...
    def register_message_handler(self, target, handler: Any | None = ...) -> None: ...
    def unregister_message_handler(self, target_or_handler) -> None: ...
    def message_handler(self, target): ...
    def register_event_callback(self, callback) -> None: ...
    def unregister_event_callback(self, callback) -> None: ...
    def event_callback(self, *event_types): ...
    def on_key_press(self, keydef, mode: str = ...): ...
    def key_binding(self, keydef, mode: str = ...): ...
    def register_key_binding(self, keydef, callback_or_cmd, mode: str = ...) -> None: ...
    def unregister_key_binding(self, keydef) -> None: ...
    def register_stream_protocol(self, proto, open_fn: Any | None = ...): ...
    def play(self, filename) -> None: ...
    @property
    def playlist_filenames(self): ...
    def playlist_append(self, filename, **options) -> None: ...
    def python_stream(self, name: Any | None = ..., size: Any | None = ...): ...
    def python_stream_catchall(self, cb): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value) -> None: ...
    def __dir__(self): ...
    @property
    def properties(self): ...
    def __getitem__(self, name, file_local: bool = ...): ...
    def __setitem__(self, name, value, file_local: bool = ...): ...
    def __iter__(self): ...
    def option_info(self, name): ...

class MpvRenderContext:
    def __init__(self, mpv, api_type, **kwargs) -> None: ...
    def free(self) -> None: ...
    def __setattr__(self, name, value): ...
    def __getattr__(self, name): ...
    def update(self): ...
    def render(self, **kwargs) -> None: ...
    def report_swap(self) -> None: ...
